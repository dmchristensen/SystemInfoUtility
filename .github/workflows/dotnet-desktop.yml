name: Wix Installer Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  WIX_PATH: 'C:\Program Files (x86)\WiX Toolset v3.11\bin'
  SOLUTION_NAME: 'SystemInfoUtility.sln'
  PUBLISH_DIR: 'SystemInfoUtility\bin\Release\net6.0-windows\win-x64\publish'
  WINDOWS_SDK_PATH: 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x86'
  TIMESTAMP_URL: 'http://timestamp.digicert.com'
  SIGNED_NAME: 'System Info Utility'
  MSI_FILE_NAME: 'System Info Utility x64'
  PFX_FILE: 'cert.pfx'

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    # Print out event info
    - name: Print Event Info
      run: echo "${{ github.event.head_commit.message }}"

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    
    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: MSBuild Restore
      run: msbuild $env:SOLUTION_NAME /t:Restore /p:Configuration=$env:Configuration
      working-directory: src
      env:
        Configuration: ${{ matrix.configuration }}

    # Publish the solution
    - name: Publish
      working-directory: src\SystemInfoUtility
      run: dotnet publish -c Release -r win-x64 --self-contained -p:PublishSingleFile=True -p:TrimMode=CopyUsed -p:PublishReadyToRun=True

    # Get the EXE Version
    - name: Get EXE Version
      working-directory: src
      run: |
        $exeVersion = (Get-Item '${{ env.PUBLISH_DIR }}\\SystemInfoUtility.exe').VersionInfo.FileVersion
        echo "FILE_VERSION=$exeVersion" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
    
    # Import the PFX
    - name: Import PFX
      working-directory: src
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String('${{ secrets.CERTIFICATE }}')
        [IO.File]::WriteAllBytes('${{ env.PFX_FILE }}', $pfx_cert_byte)
        certutil -f -p '${{ secrets.CERT_PASSWORD }}' -importpfx '${{ env.PFX_FILE }}'

    # Sign Executables
    - name: Sign Executables
      working-directory: src
      run: |
        & '${{ env.WINDOWS_SDK_PATH }}\\signtool.exe' sign /sm /t '${{ env.TIMESTAMP_URL }}' /d '${{ env.SIGNED_NAME }}' /sha1 '${{ secrets.CERT_HASH }}' '${{ env.PUBLISH_DIR }}\\SystemInfoUtility.exe'

    # Harvest the published files
    - name: Wix Harvest
      working-directory: src\SystemInfoUtility.Installer
      run: "& '${{ env.WIX_PATH }}\\heat.exe' dir '..\\${{ env.PUBLISH_DIR }}'-dr APP_INSTALLDIR -ke -srd -sreg -cg ProductComponents -var var.publishDir -t Transform.xsl -gg -out Publish.wxs"

    # Compile the Wix installer files
    - name: Wix Compile
      working-directory: src\SystemInfoUtility.Installer
      run: "& '${{ env.WIX_PATH }}\\candle.exe' -dpublishDir='..\\${{ env.PUBLISH_DIR }}' *.wxs -v -out wixobj\\"

    # Create the MSI installer
    - name: Wix Link
      working-directory: src\SystemInfoUtility.Installer
      run: "& '${{ env.WIX_PATH }}\\light.exe' -ext WixUIExtension -out 'bin\\${{ env.MSI_FILE_NAME }} ${{ env.FILE_VERSION }}.msi' -v wixobj\\*.wixobj"

    # Sign the MSI Installer
    - name: Sign MSI
      working-directory: src
      run: "& '${{ env.WINDOWS_SDK_PATH }}\\signtool.exe' sign /sm /t '${{ env.TIMESTAMP_URL }}' /d '${{ env.SIGNED_NAME }}' /sha1 '${{ secrets.CERT_HASH }}' 'SystemInfoUtility.Installer\\bin\\${{ env.MSI_FILE_NAME }} ${{ env.FILE_VERSION }}.msi'"

    # Remove the PFX
    - name: Remove PFX
      working-directory: src
      run: Remove-Item '${{ env.PFX_FILE }}'

    # Upload the MSI installer as an artifact
    - name: Upload MSI Installer
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.MSI_FILE_NAME }} ${{ env.FILE_VERSION }}
        path: 'src\SystemInfoUtility.Installer\bin\${{ env.MSI_FILE_NAME }} ${{ env.FILE_VERSION }}.msi'
        if-no-files-found: error

    # Create a Release    
    - name: Create Release
      id: create_release
      if: github.event_name == 'push'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.FILE_VERSION }}
        release_name: Release ${{ env.FILE_VERSION }}
        body: A new release for ${{ env.FILE_VERSION }}
        draft: true
        prerelease: false

    # Upload the MSI to the Release
    - name: Upload MSI to Release
      if: github.event_name == 'push'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: 'src\SystemInfoUtility.Installer\bin\${{ env.MSI_FILE_NAME }} ${{ env.FILE_VERSION }}.msi'
        asset_name: '${{ env.MSI_FILE_NAME }} ${{ env.FILE_VERSION }}.msi'
        asset_content_type: application/octet-stream
